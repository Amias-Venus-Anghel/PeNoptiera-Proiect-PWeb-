/* tslint:disable */
/* eslint-disable */
/**
 * MobyLab Web App
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ProductDTOPagedResponseRequestResponse,
  RequestResponse,
  ShoppingCartDTOPagedResponseRequestResponse,
  ShoppingCartDTORequestResponse,
} from '../models';
import {
    ProductDTOPagedResponseRequestResponseFromJSON,
    ProductDTOPagedResponseRequestResponseToJSON,
    RequestResponseFromJSON,
    RequestResponseToJSON,
    ShoppingCartDTOPagedResponseRequestResponseFromJSON,
    ShoppingCartDTOPagedResponseRequestResponseToJSON,
    ShoppingCartDTORequestResponseFromJSON,
    ShoppingCartDTORequestResponseToJSON,
} from '../models';

export interface ApiShoppingCartAddProductToCartProductIdPostRequest {
    productId: string;
}

export interface ApiShoppingCartGetByIdIdGetRequest {
    id: string;
}

export interface ApiShoppingCartGetByUserIdIdGetRequest {
    id: string;
}

export interface ApiShoppingCartGetPageGetRequest {
    search?: string;
    page?: number;
    pageSize?: number;
}

export interface ApiShoppingCartGetProductsInCartOfUserGetRequest {
    search?: string;
    page?: number;
    pageSize?: number;
}

export interface ApiShoppingCartRemoveProductFromCartProductIdDeleteRequest {
    productId: string;
}

/**
 * 
 */
export class ShoppingCartApi extends runtime.BaseAPI {

    /**
     */
    async apiShoppingCartAddProductToCartProductIdPostRaw(requestParameters: ApiShoppingCartAddProductToCartProductIdPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RequestResponse>> {
        if (requestParameters.productId === null || requestParameters.productId === undefined) {
            throw new runtime.RequiredError('productId','Required parameter requestParameters.productId was null or undefined when calling apiShoppingCartAddProductToCartProductIdPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/ShoppingCart/AddProductToCart/{productId}`.replace(`{${"productId"}}`, encodeURIComponent(String(requestParameters.productId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiShoppingCartAddProductToCartProductIdPost(requestParameters: ApiShoppingCartAddProductToCartProductIdPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RequestResponse> {
        const response = await this.apiShoppingCartAddProductToCartProductIdPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiShoppingCartGetByIdIdGetRaw(requestParameters: ApiShoppingCartGetByIdIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ShoppingCartDTORequestResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiShoppingCartGetByIdIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/ShoppingCart/GetById/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ShoppingCartDTORequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiShoppingCartGetByIdIdGet(requestParameters: ApiShoppingCartGetByIdIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ShoppingCartDTORequestResponse> {
        const response = await this.apiShoppingCartGetByIdIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiShoppingCartGetByUserIdIdGetRaw(requestParameters: ApiShoppingCartGetByUserIdIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ShoppingCartDTORequestResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiShoppingCartGetByUserIdIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/ShoppingCart/GetByUserId/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ShoppingCartDTORequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiShoppingCartGetByUserIdIdGet(requestParameters: ApiShoppingCartGetByUserIdIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ShoppingCartDTORequestResponse> {
        const response = await this.apiShoppingCartGetByUserIdIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiShoppingCartGetCartOfCurrentUserGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ShoppingCartDTORequestResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/ShoppingCart/GetCartOfCurrentUser`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ShoppingCartDTORequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiShoppingCartGetCartOfCurrentUserGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ShoppingCartDTORequestResponse> {
        const response = await this.apiShoppingCartGetCartOfCurrentUserGetRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async apiShoppingCartGetPageGetRaw(requestParameters: ApiShoppingCartGetPageGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ShoppingCartDTOPagedResponseRequestResponse>> {
        const queryParameters: any = {};

        if (requestParameters.search !== undefined) {
            queryParameters['Search'] = requestParameters.search;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['Page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['PageSize'] = requestParameters.pageSize;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/ShoppingCart/GetPage`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ShoppingCartDTOPagedResponseRequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiShoppingCartGetPageGet(requestParameters: ApiShoppingCartGetPageGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ShoppingCartDTOPagedResponseRequestResponse> {
        const response = await this.apiShoppingCartGetPageGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiShoppingCartGetProductsInCartOfUserGetRaw(requestParameters: ApiShoppingCartGetProductsInCartOfUserGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductDTOPagedResponseRequestResponse>> {
        const queryParameters: any = {};

        if (requestParameters.search !== undefined) {
            queryParameters['Search'] = requestParameters.search;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['Page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['PageSize'] = requestParameters.pageSize;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/ShoppingCart/GetProductsInCartOfUser`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductDTOPagedResponseRequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiShoppingCartGetProductsInCartOfUserGet(requestParameters: ApiShoppingCartGetProductsInCartOfUserGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductDTOPagedResponseRequestResponse> {
        const response = await this.apiShoppingCartGetProductsInCartOfUserGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiShoppingCartRemoveProductFromCartProductIdDeleteRaw(requestParameters: ApiShoppingCartRemoveProductFromCartProductIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RequestResponse>> {
        if (requestParameters.productId === null || requestParameters.productId === undefined) {
            throw new runtime.RequiredError('productId','Required parameter requestParameters.productId was null or undefined when calling apiShoppingCartRemoveProductFromCartProductIdDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/ShoppingCart/RemoveProductFromCart/{productId}`.replace(`{${"productId"}}`, encodeURIComponent(String(requestParameters.productId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiShoppingCartRemoveProductFromCartProductIdDelete(requestParameters: ApiShoppingCartRemoveProductFromCartProductIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RequestResponse> {
        const response = await this.apiShoppingCartRemoveProductFromCartProductIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
